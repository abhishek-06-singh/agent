'use client'
import { useState } from 'react'
import { ChevronLeft, ChevronRight } from 'lucide-react'

const leads = [
  {
    id: 1,
    name: 'Sarah Johnson',
    email: 'sarah.johnson@email.com',
    avatar: 'https://randomuser.me/api/portraits/women/44.jpg',
    property: {
      name: 'Modern Family Home',
      address: '123 Oak Street, Beverly Hills',
      image:
        'https://cdn.pixabay.com/photo/2017/03/28/12/11/apartment-2187173_640.jpg',
    },
    status: 'New',
    contactedDate: 'Jan 15, 2025',
  },
  {
    id: 2,
    name: 'Sarah Johnson',
    email: 'sarah.johnson@email.com',
    avatar: 'https://randomuser.me/api/portraits/women/44.jpg',
    property: {
      name: 'Modern Family Home',
      address: '123 Oak Street, Beverly Hills',
      image:
        'https://cdn.pixabay.com/photo/2017/03/28/12/11/apartment-2187173_640.jpg',
    },
    status: 'Negotiation',
    contactedDate: 'Jan 15, 2025',
  },
  {
    id: 3,
    name: 'Sarah Johnson',
    email: 'sarah.johnson@email.com',
    avatar: 'https://randomuser.me/api/portraits/women/44.jpg',
    property: {
      name: 'Modern Family Home',
      address: '123 Oak Street, Beverly Hills',
      image:
        'https://cdn.pixabay.com/photo/2017/03/28/12/11/apartment-2187173_640.jpg',
    },
    status: 'Closed',
    contactedDate: 'Jan 20, 2025',
  },
]

export default function LeadsTable({ decodedUser }) {
  const [currentPage, setCurrentPage] = useState(1)
  const pageSize = 2
  const totalResults = leads.length
  const totalPages = Math.ceil(totalResults / pageSize)

  const start = (currentPage - 1) * pageSize
  const end = start + pageSize
  const currentItems = leads.slice(start, end)

  return (
    <div className="mt-8">
      <h2 className="text-lg text-textheading font-semibold mb-4">
        Leads Generated by {decodedUser}
      </h2>
      <div className="overflow-hidden rounded-xl border border-gray-200 bg-background shadow">
        <table className="min-w-full text-left">
          <thead className="bg-background text-textplaceholder text-sm font-thin">
            <tr>
              <th className="p-4">Lead Name</th>
              <th className="p-4"></th>
              <th className="p-4">Property Interest</th>
              <th className="p-4">Status</th>
              <th className="p-4">Contacted Date</th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200 text-textnormal">
            {currentItems.map((lead) => (
              <tr key={lead.id} className="hover:bg-gray-50">
                {/* Lead Name */}
                <td className="p-4 flex items-center gap-3">
                  <img
                    src={lead.avatar}
                    alt={lead.name}
                    className="w-10 h-10 rounded-full object-cover"
                  />
                  <div>
                    <div className="font-semibold">{lead.name}</div>
                    <div className="text-sm text-gray-500">{lead.email}</div>
                  </div>
                </td>
                <td></td>
                {/* Property */}
                <td className="p-4 flex items-center gap-3">
                  <img
                    src={lead.property.image}
                    alt={lead.property.name}
                    className="w-16 h-12 rounded-lg object-cover"
                  />
                  <div>
                    <div className="font-semibold">{lead.property.name}</div>
                    <div className="text-sm text-gray-500">
                      {lead.property.address}
                    </div>
                  </div>
                </td>

                {/* Status */}
                <td className="p-4">
                  <span
                    className={`inline-flex items-center rounded-full px-2.5 py-1 text-xs font-medium text-background
              ${
                lead.status === 'New'
                  ? 'bg-green-600'
                  : lead.status === 'Negotiation'
                    ? 'bg-yellow-500'
                    : 'bg-gray-500'
              }`}
                  >
                    ‚óè {lead.status}
                  </span>
                </td>

                {/* Contacted Date */}
                <td className="p-4">{lead.contactedDate}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      <div className="flex items-center justify-between mt-4 text-sm text-gray-600">
        <p>
          Showing {start + 1} to {Math.min(end, totalResults)} of {totalResults}{' '}
          results
        </p>
        <div className="flex items-center gap-2">
          <button
            disabled={currentPage === 1}
            onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))}
            className="px-3 py-1 border border-textnormal rounded-lg disabled:opacity-50 flex items-center gap-1"
          >
            <ChevronLeft className="w-4 h-4" /> Back
          </button>

          {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
            <button
              key={page}
              onClick={() => setCurrentPage(page)}
              className={`px-3 py-1 rounded-lg border ${
                currentPage === page
                  ? 'bg-textnormal text-background'
                  : 'hover:bg-gray-100 text-textnormal'
              }`}
            >
              {page}
            </button>
          ))}

          <button
            disabled={currentPage === totalPages}
            onClick={() => setCurrentPage((p) => Math.min(p + 1, totalPages))}
            className="px-3 py-1 border border-textnormal rounded-lg disabled:opacity-50 flex items-center gap-1"
          >
            Next <ChevronRight className="w-4 h-4" />
          </button>
        </div>
      </div>
    </div>
  )
}
